%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% 基础知识
1、JDBC 

(Java DataBase Connectivity,java数据库连接)是一种用于执行SQL语句的Java API，可以为多种关系数据库提供统一访问，它由一组用Java语言编写的类和接口组成。JDBC提供了一种基准，据此可以构建更高级的工具和接口，使数据库开发人员能够编写数据库应用程序

链接：https://blog.csdn.net/chenxingxingxing/article/details/123462544
http://www.360doc.com/content/18/0911/14/53335007_785678185.shtml
--------------------------------------------------------------------------------------------------------
2、ORM

ORM是一种思想，全称为对象-关系映射(Object Relational Mapping)。它简化了数据库查询过程，通过使用ORM查询工具，用户可以访问期望的数据，而不必理解数据库的底层结构。

--------------------------------------------------------------------------------------------------------3、@RestController

@RestController注解的作用是将一个类标记为RESTful风格的控制器。它是@RestController注解的简写形式，相当于@ResponseBody ＋ @Controller合在一起的作用。使用@RestController注解的类可以直接返回数据而不需要使用视图解析器渲染页面。

--------------------------------------------------------------------------------------------------------
4、RESTful架构

RESTful架构是一种设计和组织网络应用程序的原则和约束。它基于一组准则，旨在提供一种简单、可扩展、可伸缩和可靠的方式来构建和交互网络服务。以下是对RESTful架构的详细解释：

1.资源（Resources）
RESTful架构将应用程序中的数据和功能抽象为资源。资源可以是任何有唯一标识的实体，比如用户、文章、图片等。每个资源在网络上都有一个唯一的URL地址（Uniform Resource Locator）来表示。
2.统一接口（Uniform Interface）
RESTful架构通过定义一组统一的接口约束，使得客户端和服务器之间的通信变得简单而直接。这些接口包括使用HTTP方法进行资源的访问和操作，如GET、POST、PUT、DELETE等。
3.无状态（Stateless）
在RESTful架构中，服务器不会保留客户端请求的任何状态信息。每个请求都是独立的，服务器只根据请求本身来处理和响应。这样可以提高系统的可伸缩性和可靠性。
4.按需可缓存（Cacheable）
RESTful架构支持使用缓存来提高性能和减轻服务器的负载。服务器可以使用HTTP的缓存机制来标记哪些响应是可缓存的，以及在何种条件下可以使用缓存。
5.客户端-服务器（Client-Server）
RESTful架构将客户端和服务器的关注点分离，使得两者可以独立演化。客户端负责用户界面和用户交互，服务器则负责数据存储、处理和提供服务。这种分离提高了系统的可扩展性和可重用性。
6.无连接（Stateless）
RESTful架构中的每个请求都是独立的，并且不依赖于之前的请求。服务器不会在请求之间保留任何客户端相关的状态。这种无连接性质使得系统更灵活和可靠，可以部署在分布式和高可用的环境中。
7.分层系统（Layered System）
RESTful架构支持通过添加中间层来实现功能的划分和复用。这样可以实现负载均衡、安全性、缓存等特性，并且提供了更好的可扩展性和可维护性。


总而言之，RESTful架构是一种基于资源、统一接口和无状态的架构风格，通过使用HTTP协议的方法和约束来构建和交互网络应用程序。它提倡简单性、可扩展性、可伸缩性和可靠性，被广泛应用于Web服务和API的设计和开发中。
--------------------------------------------------------------------------------------------------------
基于 JSON 的 web令牌技术 JWT（JSON Web Token）是一种有效的解决方案。在前端的登陆页面，通过 post 请求，将用户名和密码提交到服务器的登陆服务，验证通过后，服务器根据用户信息生成一个 JWT 对象返回到前端。JWT 字符串有三部分组成：Head 头部、Payload 负载和签名。前端接收到 JWT 字符串后存储在浏览器中，在后续的每次请求中，都会在 HTTP 的Header 中的 Authorization 对象中携带 JWT 字符串。服务端接收到后，验证该 JWT 的有效性，包括令牌 Token 是否过期，根据验证结果判断请求是否合法。


--------------------------------------------------------------------------------------------------------
5、SSM框架

SSM框架是指Spring MVC、Spring和Mybatis框架的整合，是一种标准的MVC模式。它将整个系统划分为四层，分别是View层、Controller层、Service层和DAO层。
在SSM框架中，Spring MVC负责请求的转发和视图管理，Spring负责业务对象的管理，而Mybatis则作为数据对象的持久化引擎。
SSM框架的四层结构包括：
View层：负责展示页面和接收用户的请求，将用户的数据传递给Controller层。
Controller层：接收来自View层的请求，调用Service层进行业务处理，并返回处理结果给View层。
Service层：负责业务逻辑的处理，调用DAO层进行数据操作，并返回结果给Controller层。
DAO层：负责数据库的操作，通过Mybatis提供的持久化机制进行数据的增删改查操作。

通过整合Spring MVC、Spring和Mybatis三个框架，SSM框架能够实现良好的代码结构和模块化，并提供了灵活性和可扩展性，使开发人员能够更高效地进行开发和维护。

















